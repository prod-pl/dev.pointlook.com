#!/usr/bin/env node
"use strict";

var DEFAULT_MODULES = ["c9", "simple-template", "architect", "amd-loader", "heapdump", "optimist"];
var DEFAULT_SETTINGS = "deploy";

var npmBuild = require("architect-build/npm_build");
var async = require("async");
var fs = require("fs");
var optimist = require("optimist");
var _ = require("lodash");

module.exports = nodeModules;

if (!module.parent) {
    main(process.argv.slice(2), function(err) {
        if (err) {
            console.error(err);
            console.error("Stacktrace: ", err.stack);
            process.exit(1);
        }
    });
}

function main(argv, callback) {
    var options = optimist(argv)
        .usage("Usage: $0 [CONFIG_NAME] [--help]")
        .alias("s", "settings")
        .default("settings", DEFAULT_SETTINGS)
        .describe("settings", "Settings file to use")
        .default("source", __dirname + "/../../..")
        .describe("source", "Source directory")
        .describe("targetFile", "Target package.json")
        .boolean("help")
        .describe("help", "Show command line options.");

    argv = options.argv;
    if (argv.help) {
        options.showHelp();
        return callback();
    }

    if (argv._.length != 1) {
        options.showHelp();
        return callback();
    }
    var config = argv._[0];
    var settings = argv.settings;
    var source = argv.source;

    nodeModules(source, config, settings, function(err, json) {
        if (err) return callback(err);
        
        if (argv.targetFile)
            fs.writeFileSync(argv.targetFile, JSON.stringify(json, null, 2));
        else
            console.log(JSON.stringify(json, null, 2));
    });
}

function calculateRequiredNodeModules(sourceDir, buildConfig, configNames, settingsName, callback) {
    if (buildConfig.nodeModulesInclude === "*") { // If the user specifically asks for all don't bother calculating
        return callback();
    }
    
    async.map(configNames.split(","), calculateModules, function (err, modules) {
        if (err) return callback(err);
        return callback(null, _.uniq(_.flatten(modules))); /* Flatten array and remove duplicates */
    });
    
    function calculateModules (configName, done) {
        npmBuild({
            root: sourceDir,
            args: [configName, '-s', settingsName]
        }, function (err, result) {
            if (err) return done(err);
            
            var deps = result.roots;
            
            var nodeModules = [];
            deps.forEach(function (dep) {
                if (dep.match(/node_modules/)) {
                    nodeModules.push(dep.replace(/node_modules\//, ""));
                }
            });
            nodeModules.sort();
            return done(null, nodeModules);
        });
    }
}
    
function nodeModules(sourceDir, configNames, settingsName, callback) {
    var buildConfig = require(sourceDir + "/configs/" + configNames).buildConfig({mode: settingsName});
    var packageJson = require(sourceDir + "/package.json");
    
    var nodeModules = packageJson.dependencies;

    delete packageJson.devDependencies;
    delete packageJson.scripts;
    
    /* Calculates what modules are needed for this config, so they can be contact'd to nodeModulesInclude */
    calculateRequiredNodeModules(sourceDir, buildConfig, configNames, settingsName, function(err, modules) {
        if (err) return callback(err);
        
        var allModules = buildConfig.nodeModulesInclude.concat(modules).concat(DEFAULT_MODULES);
        
        packageJson.dependencies = allModules.reduce(function(deps, name) {
            if (nodeModules[name])
                deps[name] = nodeModules[name];
            else
                deps[name] = "*";
            
            return deps;
        }, {});

        callback(null, packageJson);
    });
}